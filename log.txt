30/10/20
Wanted to use gc controller, wasnt supported by quick silver out of the box -> understandable. Carried on with keyboard to develop the game itself.
Decided to handle the controller after.

Spent an afternoon updating to latest quicksilver interface changes.

31/10/20
After that, began focusing on implementing the game with keybaord and mouse controls, being careful to provide a suitable interface for the camera/bongo combination.

November + December + January
Moved away from the game to develop the face capture library as a seperate project. See seperate log for notes

24/1/2021
First stab at integrating the face traking controller into bongosero, hooked up to the library ok, but the player sprite jumps around a lot
Need to think of a good way to smooth out movement.
Ideas:
- Keep a running history of bboxes and average out the centre points
- Implement a PID loop
- Implement a "dead zone", so only big enough head movements are recorded
- Some combination of the ideas above...

20/2/2021
Took time off to focus on game jam/coding break.
Project has been descoped. This is now a demonstration of the idea of playing a space invader/1942 style shoot em up with head tracking controlling player movement.

Response to ideas for smoothing out movement.
- Dead zone -> Will attempt this first
- Running history -> Good but could be unnecessary, attempt if deadzone fails.
- PID loop -> N/A for this problem, this is ideal for automation problems.

Dead zone made a big difference but the player movement doesn't look fluid. To combat this I created a history of recorded velocities (meaning offsets from previous position), and used the average velocity when we exceeded the dead zone.
Not quite as smooth as I'd like but a bit better. The way the velocities is calculated isnt great. Its based on the last position we actually moved the player to, not the last one we attempted to move to.
So the velocities always get larger until they are used (history is wiped each time we actually move).

Other issues to resolve
- the "position" is in ftrak coordinate space instead of the game's space. Need to scale the bbox value for more accurate positioning.
- the game limits the player from exceeding the bounds, but the controller has no knowledge of this, meaning velocities get recorded even though we dont move.

21/3/2021
Error in commit means log entries lost. Summary:

Managed to resolve smooth movement, accurate position, and exceeding player bounds issues by simplifing the way we handle f-trak input.
Face position is retrieved, converted to game coords and player position is updated. No more fancy velocity calculations over complicating matters.
Needs refactor as game is full of experiment code.

Today's entry:

Tidied up the code by separating the controller into a movement and weapon device. These structs will handle comms between a device each anyway, and the separation is
much cleaner, easier to maintain, and more modular.

TODO SUMMARY:

- Handle keyboard input without quicksilver
- Handle Bongo input
- Create JSON file for configurables
   - Parse JSON and setup game accordingly
- Implement enemies
- Implement Music and SFX
- Replace image assets with better ones